# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings


from . import db_service_pb2 as db__service__pb2

GRPC_GENERATED_VERSION = '1.64.3'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in db_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class DatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUserProfile = channel.unary_unary(
                '/dbservice.DatabaseService/CreateUserProfile',
                request_serializer=db__service__pb2.UserProfileRequest.SerializeToString,
                response_deserializer=db__service__pb2.UserProfileResponse.FromString,
                _registered_method=True)
        self.GetUserProfile = channel.unary_unary(
                '/dbservice.DatabaseService/GetUserProfile',
                request_serializer=db__service__pb2.GetRequest.SerializeToString,
                response_deserializer=db__service__pb2.UserProfileResponse.FromString,
                _registered_method=True)
        self.UpdateUserProfile = channel.unary_unary(
                '/dbservice.DatabaseService/UpdateUserProfile',
                request_serializer=db__service__pb2.UserProfileRequest.SerializeToString,
                response_deserializer=db__service__pb2.UserProfileResponse.FromString,
                _registered_method=True)
        self.DeleteUserProfile = channel.unary_unary(
                '/dbservice.DatabaseService/DeleteUserProfile',
                request_serializer=db__service__pb2.GetRequest.SerializeToString,
                response_deserializer=db__service__pb2.DeleteResponse.FromString,
                _registered_method=True)
        self.CreateUserSettings = channel.unary_unary(
                '/dbservice.DatabaseService/CreateUserSettings',
                request_serializer=db__service__pb2.UserSettingsRequest.SerializeToString,
                response_deserializer=db__service__pb2.UserSettingsResponse.FromString,
                _registered_method=True)
        self.GetUserSettings = channel.unary_unary(
                '/dbservice.DatabaseService/GetUserSettings',
                request_serializer=db__service__pb2.GetRequest.SerializeToString,
                response_deserializer=db__service__pb2.UserSettingsResponse.FromString,
                _registered_method=True)
        self.UpdateUserSettings = channel.unary_unary(
                '/dbservice.DatabaseService/UpdateUserSettings',
                request_serializer=db__service__pb2.UserSettingsRequest.SerializeToString,
                response_deserializer=db__service__pb2.UserSettingsResponse.FromString,
                _registered_method=True)
        self.DeleteUserSettings = channel.unary_unary(
                '/dbservice.DatabaseService/DeleteUserSettings',
                request_serializer=db__service__pb2.GetRequest.SerializeToString,
                response_deserializer=db__service__pb2.DeleteResponse.FromString,
                _registered_method=True)
        self.CreateEvent = channel.unary_unary(
                '/dbservice.DatabaseService/CreateEvent',
                request_serializer=db__service__pb2.EventRequest.SerializeToString,
                response_deserializer=db__service__pb2.EventResponse.FromString,
                _registered_method=True)
        self.GetEvent = channel.unary_unary(
                '/dbservice.DatabaseService/GetEvent',
                request_serializer=db__service__pb2.GetRequest.SerializeToString,
                response_deserializer=db__service__pb2.EventResponse.FromString,
                _registered_method=True)
        self.UpdateEvent = channel.unary_unary(
                '/dbservice.DatabaseService/UpdateEvent',
                request_serializer=db__service__pb2.EventRequest.SerializeToString,
                response_deserializer=db__service__pb2.EventResponse.FromString,
                _registered_method=True)
        self.DeleteEvent = channel.unary_unary(
                '/dbservice.DatabaseService/DeleteEvent',
                request_serializer=db__service__pb2.GetRequest.SerializeToString,
                response_deserializer=db__service__pb2.DeleteResponse.FromString,
                _registered_method=True)
        self.ListEvents = channel.unary_unary(
                '/dbservice.DatabaseService/ListEvents',
                request_serializer=db__service__pb2.ListEventsRequest.SerializeToString,
                response_deserializer=db__service__pb2.ListEventsResponse.FromString,
                _registered_method=True)
        self.CreateAiSuggestion = channel.unary_unary(
                '/dbservice.DatabaseService/CreateAiSuggestion',
                request_serializer=db__service__pb2.AiSuggestionRequest.SerializeToString,
                response_deserializer=db__service__pb2.AiSuggestionResponse.FromString,
                _registered_method=True)
        self.GetAiSuggestion = channel.unary_unary(
                '/dbservice.DatabaseService/GetAiSuggestion',
                request_serializer=db__service__pb2.GetRequest.SerializeToString,
                response_deserializer=db__service__pb2.AiSuggestionResponse.FromString,
                _registered_method=True)
        self.UpdateAiSuggestion = channel.unary_unary(
                '/dbservice.DatabaseService/UpdateAiSuggestion',
                request_serializer=db__service__pb2.AiSuggestionRequest.SerializeToString,
                response_deserializer=db__service__pb2.AiSuggestionResponse.FromString,
                _registered_method=True)
        self.DeleteAiSuggestion = channel.unary_unary(
                '/dbservice.DatabaseService/DeleteAiSuggestion',
                request_serializer=db__service__pb2.GetRequest.SerializeToString,
                response_deserializer=db__service__pb2.DeleteResponse.FromString,
                _registered_method=True)
        self.ListAiSuggestions = channel.unary_unary(
                '/dbservice.DatabaseService/ListAiSuggestions',
                request_serializer=db__service__pb2.ListAiSuggestionsRequest.SerializeToString,
                response_deserializer=db__service__pb2.ListAiSuggestionsResponse.FromString,
                _registered_method=True)


class DatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateUserProfile(self, request, context):
        """User Profile Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUserSettings(self, request, context):
        """User Settings Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUserSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEvent(self, request, context):
        """Event Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAiSuggestion(self, request, context):
        """AI Suggestion Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAiSuggestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAiSuggestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAiSuggestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAiSuggestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUserProfile,
                    request_deserializer=db__service__pb2.UserProfileRequest.FromString,
                    response_serializer=db__service__pb2.UserProfileResponse.SerializeToString,
            ),
            'GetUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserProfile,
                    request_deserializer=db__service__pb2.GetRequest.FromString,
                    response_serializer=db__service__pb2.UserProfileResponse.SerializeToString,
            ),
            'UpdateUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserProfile,
                    request_deserializer=db__service__pb2.UserProfileRequest.FromString,
                    response_serializer=db__service__pb2.UserProfileResponse.SerializeToString,
            ),
            'DeleteUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUserProfile,
                    request_deserializer=db__service__pb2.GetRequest.FromString,
                    response_serializer=db__service__pb2.DeleteResponse.SerializeToString,
            ),
            'CreateUserSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUserSettings,
                    request_deserializer=db__service__pb2.UserSettingsRequest.FromString,
                    response_serializer=db__service__pb2.UserSettingsResponse.SerializeToString,
            ),
            'GetUserSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserSettings,
                    request_deserializer=db__service__pb2.GetRequest.FromString,
                    response_serializer=db__service__pb2.UserSettingsResponse.SerializeToString,
            ),
            'UpdateUserSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserSettings,
                    request_deserializer=db__service__pb2.UserSettingsRequest.FromString,
                    response_serializer=db__service__pb2.UserSettingsResponse.SerializeToString,
            ),
            'DeleteUserSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUserSettings,
                    request_deserializer=db__service__pb2.GetRequest.FromString,
                    response_serializer=db__service__pb2.DeleteResponse.SerializeToString,
            ),
            'CreateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEvent,
                    request_deserializer=db__service__pb2.EventRequest.FromString,
                    response_serializer=db__service__pb2.EventResponse.SerializeToString,
            ),
            'GetEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEvent,
                    request_deserializer=db__service__pb2.GetRequest.FromString,
                    response_serializer=db__service__pb2.EventResponse.SerializeToString,
            ),
            'UpdateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEvent,
                    request_deserializer=db__service__pb2.EventRequest.FromString,
                    response_serializer=db__service__pb2.EventResponse.SerializeToString,
            ),
            'DeleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEvent,
                    request_deserializer=db__service__pb2.GetRequest.FromString,
                    response_serializer=db__service__pb2.DeleteResponse.SerializeToString,
            ),
            'ListEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEvents,
                    request_deserializer=db__service__pb2.ListEventsRequest.FromString,
                    response_serializer=db__service__pb2.ListEventsResponse.SerializeToString,
            ),
            'CreateAiSuggestion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAiSuggestion,
                    request_deserializer=db__service__pb2.AiSuggestionRequest.FromString,
                    response_serializer=db__service__pb2.AiSuggestionResponse.SerializeToString,
            ),
            'GetAiSuggestion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAiSuggestion,
                    request_deserializer=db__service__pb2.GetRequest.FromString,
                    response_serializer=db__service__pb2.AiSuggestionResponse.SerializeToString,
            ),
            'UpdateAiSuggestion': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAiSuggestion,
                    request_deserializer=db__service__pb2.AiSuggestionRequest.FromString,
                    response_serializer=db__service__pb2.AiSuggestionResponse.SerializeToString,
            ),
            'DeleteAiSuggestion': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAiSuggestion,
                    request_deserializer=db__service__pb2.GetRequest.FromString,
                    response_serializer=db__service__pb2.DeleteResponse.SerializeToString,
            ),
            'ListAiSuggestions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAiSuggestions,
                    request_deserializer=db__service__pb2.ListAiSuggestionsRequest.FromString,
                    response_serializer=db__service__pb2.ListAiSuggestionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbservice.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dbservice.DatabaseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/CreateUserProfile',
            db__service__pb2.UserProfileRequest.SerializeToString,
            db__service__pb2.UserProfileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/GetUserProfile',
            db__service__pb2.GetRequest.SerializeToString,
            db__service__pb2.UserProfileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/UpdateUserProfile',
            db__service__pb2.UserProfileRequest.SerializeToString,
            db__service__pb2.UserProfileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/DeleteUserProfile',
            db__service__pb2.GetRequest.SerializeToString,
            db__service__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUserSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/CreateUserSettings',
            db__service__pb2.UserSettingsRequest.SerializeToString,
            db__service__pb2.UserSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/GetUserSettings',
            db__service__pb2.GetRequest.SerializeToString,
            db__service__pb2.UserSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUserSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/UpdateUserSettings',
            db__service__pb2.UserSettingsRequest.SerializeToString,
            db__service__pb2.UserSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUserSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/DeleteUserSettings',
            db__service__pb2.GetRequest.SerializeToString,
            db__service__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/CreateEvent',
            db__service__pb2.EventRequest.SerializeToString,
            db__service__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/GetEvent',
            db__service__pb2.GetRequest.SerializeToString,
            db__service__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/UpdateEvent',
            db__service__pb2.EventRequest.SerializeToString,
            db__service__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/DeleteEvent',
            db__service__pb2.GetRequest.SerializeToString,
            db__service__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/ListEvents',
            db__service__pb2.ListEventsRequest.SerializeToString,
            db__service__pb2.ListEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAiSuggestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/CreateAiSuggestion',
            db__service__pb2.AiSuggestionRequest.SerializeToString,
            db__service__pb2.AiSuggestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAiSuggestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/GetAiSuggestion',
            db__service__pb2.GetRequest.SerializeToString,
            db__service__pb2.AiSuggestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAiSuggestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/UpdateAiSuggestion',
            db__service__pb2.AiSuggestionRequest.SerializeToString,
            db__service__pb2.AiSuggestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAiSuggestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/DeleteAiSuggestion',
            db__service__pb2.GetRequest.SerializeToString,
            db__service__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAiSuggestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dbservice.DatabaseService/ListAiSuggestions',
            db__service__pb2.ListAiSuggestionsRequest.SerializeToString,
            db__service__pb2.ListAiSuggestionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
